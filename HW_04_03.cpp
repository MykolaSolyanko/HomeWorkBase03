#include <cstring>
#include <iostream>
#include <random>

static constexpr size_t MSG_SIZE{192};
static constexpr size_t TABLE_ROW{MSG_SIZE};
static constexpr size_t TABLE_COL{MSG_SIZE};

struct packet_t {
  size_t col;
  size_t row;
  char msg[TABLE_COL][TABLE_ROW];
};

const char *Message{"The first half of life consists of the capacity to "
                    "enjoy without the chance, the last half consists of "
                    "the chance without the capacity. Mark Twain"};

static packet_t Alisa{};
static packet_t Bob{};
static char Bob_decoded_message[MSG_SIZE * MSG_SIZE]{};

static void crypto_write_cols(packet_t *dstr, const char *src);
static void crypto_read_cols(const packet_t *src, char *dstr);
static size_t msg_len(const char *msg);
static uint32_t rand_uint32(uint32_t MIN, uint32_t MAX);
static size_t best_devider(size_t value);
static size_t devider_quantity(size_t value);
static void ALISA_Encode(packet_t *enc_data, const char *message);
static void Bob_Decode(const packet_t *enc_data, char *message);
static void Serial_data_exchange(void *receiver_buff, void *transmitter_buff,
                                 size_t size);

int main() {
  std::cout << std::endl;

  ALISA_Encode(&Alisa, Message);
  Serial_data_exchange(&Bob, &Alisa, sizeof(packet_t));
  // memcpy(&Bob, &Alisa, sizeof(packet_t));
  Bob_Decode(&Bob, Bob_decoded_message);
  std::cout << "Decoded message is: " << Bob_decoded_message << std::endl;
  return EXIT_SUCCESS;
}

static void crypto_write_cols(packet_t *dstr, const char *src) {
  if ((dstr == nullptr) || (src == nullptr)) {
    return;
  }
  for (size_t i = 0; i < dstr->col; i++) {
    for (size_t j = 0; j < dstr->row; j++) {
      if (*src == '\0') {
        dstr->msg[j][i] = *src;
        return;
      }
      dstr->msg[j][i] = *src;
      // std::cout << *src << '\t' << dstr->msg[j][i] << std::endl;
      src++;
    }
  }
}

static void crypto_read_cols(const packet_t *src, char *dstr) {
  if ((dstr == nullptr) || (src == nullptr)) {
    return;
  }
  size_t index{};
  for (size_t i = 0; i < src->col; i++) {
    for (size_t j = 0; j < src->row; j++) {
      if (src->msg[j][i] == '\0') {
        return;
      }
      dstr[index++] = src->msg[j][i];
    }
  }
}

static size_t msg_len(const char *msg) {
  size_t len{};
  while ((msg != nullptr) && (*msg != '\0')) {
    len++;
    msg++;
  }
  return len;
}

static uint32_t rand_uint32(uint32_t MIN, uint32_t MAX) {
  // Will be used to obtain a seed for the random number engine
  std::random_device rd;
  std::mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
  std::uniform_int_distribution<uint32_t> distrib(MIN, MAX);
  // Use `distrib` to transform the random unsigned int generated by gen into
  // an int in [MIN, MAX]
  return distrib(gen);
}

static size_t best_devider(size_t value) {
  auto devider{value};
  while ((devider != 1) && (value % (--devider))) {
  }
  return devider;
}

static size_t devider_quantity(size_t value) {
  size_t quantity{1};
  while ((value = best_devider(value)) != 1) {
    std::cout << "Devider is: " << value << std::endl;
    quantity++;
  }
  return quantity;
}

static void ALISA_Encode(packet_t *enc_data, const char *message) {
  if ((enc_data == nullptr) || (message == nullptr)) {
    return;
  }
  auto len{msg_len(message)};
  if ((len % 4) == 1) {
    len++;
  }
  enc_data->col = len;
  for (size_t rand_x = rand_uint32(1, devider_quantity(enc_data->col)); rand_x;
       rand_x--) {
    enc_data->col = best_devider(enc_data->col);
  }
  enc_data->row = len / enc_data->col;
  std::cout << __PRETTY_FUNCTION__ << std::endl;
  std::cout << "Message len = " << len << std::endl;
  std::cout << "col = " << enc_data->col << std::endl;
  std::cout << "row = " << enc_data->row << std::endl;
  crypto_write_cols(enc_data, message);
}

static void Bob_Decode(const packet_t *enc_data, char *message) {
  if ((enc_data == nullptr) || (message == nullptr)) {
    return;
  }
  std::cout << __PRETTY_FUNCTION__ << std::endl;
  crypto_read_cols(enc_data, message);
  std::cout << "Message len = " << msg_len(message) << std::endl;
  std::cout << "col = " << enc_data->col << std::endl;
  std::cout << "row = " << enc_data->row << std::endl;
}

static void Serial_data_exchange(void *receiver_buff, void *transmitter_buff,
                                 size_t size) {
  if ((receiver_buff == nullptr) || (transmitter_buff == nullptr) ||
      (size == 0)) {
    return;
  }
  uint8_t *dstr = (uint8_t *)receiver_buff;
  uint8_t *src = (uint8_t *)transmitter_buff;
  for (size_t i = 0; i < size; i++) {
    dstr[i] = src[i];
  }
}